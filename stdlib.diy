;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
  (lambda (l r)
    (if l
      #t
      r)))

(define and
  (lambda (l r)
    (if l
      r
      #f)))

(define xor
  (lambda (l r)
    (if l
      (if r #f #t)
      r)))

(define >=
  (lambda (l r)
    (if (> l r)
      #t
      (if (> r l) #f #t))))

(define <=
  (lambda (l r)
    (if (> l r) #f #t)))

(define <
  (lambda (l r)
    (> r l)))

(define sum
  (lambda (l)
    (if (empty l)
      0
      (+ (head l) (sum (tail l))))))

(define length
  (lambda (l)
    (if (empty l)
      0
      (+ 1 (length (tail l))))))

(define append
  (lambda (l r)
    (if (empty l)
      r
      (if (empty (tail l))
        (cons (head l) r)
        (cons (head l) (append (tail l) r))))))

(define filter
  (lambda (x l)
    (if (empty l)
      l
      (if (x (head l))
        (cons (head l) (filter x (tail l)))
        (filter x (tail l))))))

(define map
  (lambda (x l)
    (if (empty l)
      l
      (cons (x (head l)) (map x (tail l))))))

(define reverse
  (lambda (l)
    (if (or (empty l) (empty (tail l)))
      l
      (append (reverse (tail l)) (cons (head l) '())))))

(define range
  (lambda (s e)
    (if (> s e)
      '()
      (cons s (range (+ 1 s) e)))))
